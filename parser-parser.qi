\

Copyright (C) 2011, Kjetil S. Matheussen

*** License:

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

 - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


\


(set *parser-fail-value* (gensym "parser-fail"))
(define parser-fail
  -> (value *parser-fail-value*))


(define parser-get-name
  A -> (let S   (symbol->string A)
            Pos (SEARCH "/" S)
            (if (or (= Pos [])
                    (is-lower-alpha? (head (explode A))))
                A
                (let Name (SUBSEQ S 0 Pos)
                  (if (or (= "P" Name)
                          (= "Peak" Name))
                      (error "A matcher name can not be named P or Peak")
                      (string->symbol Name))))))

(define parser-get-matcher
  A -> (let S   (symbol->string A)
            Pos (SEARCH "/" S)
            (if (or (= Pos [])
                    (is-lower-alpha? (head (explode A))))
                A
                (string->symbol (SUBSEQ S (1+ Pos))))))

\
(track parser-get-matcher)
(untrack parser-get-name)
(parser-get-name P/<expr>)
(parser-get-matcher Size/<expr>)
(parser-get-matcher <expr>)
(parser-get-name Size/<expr>)
(parser-get-name <expr>)
\

(define parser-is-parser-call?
  Matcher -> (and (or (variable? Matcher)
                      (symbol? Matcher))
                  (let Matcher (parser-get-matcher Matcher)
                       Els     (explode Matcher)
                       (and (= #\< (head Els))
                            (= #\> (last Els))))))

\
(parser-is-parser-call? <abc)
(parser-is-parser-call? <abc>)
(parser-is-parser-call? abc>)
(parser-is-parser-call? Size/<expr>)
(parser-is-parser-call? Size/expr>)
(parser-rule [V/<var>] [list V])
\



(define parser-rule
  []       Semantic -> (let Semantics-try (gensym "Semantics-try")
                         [let Semantics-try Semantic
                           [if [not [= #\Escape Semantics-try]]
                               [@p P Semantics-try]
                               #\Escape]])

  [<e>|_ ] Semantic -> (parser-rule [] Semantic)

  [-*-|Ms] Semantic -> [let -*- [Peak P]  \ A 'let' with more than 3 arguments doesn't work with Qi macros (SBCL). \
                         [let P [1+ P]
                           (parser-rule Ms Semantic)]]

  [M  |Ms] Semantic -> (let Matcher (parser-get-matcher M)
                            Name (parser-get-name M)
                            Temp (gensym "Temp")
                            [let Temp [Matcher Peak P]
                              [if [= #\Escape Temp]
                                  #\Escape
                                  [let P [fst Temp]
                                    [let Name [snd Temp]
                                      (parser-rule Ms Semantic)]]]]) where (parser-is-parser-call? M)


  [M  |Ms] Semantic -> [if [= [Peak P] M]
                           [let P [1+ P]
                             (parser-rule Ms Semantic)]
                           #\Escape])
                       
\
(parser-rule [-*-] [1+ -*-])
(parser-rule [","] 50)
(parser-rule [<e>] [])
(parser-rule [<var>] [<var>])
(parser-rule [V/<var>] [V])
(parser-rule [<var> "," <var-list>] [<var> | <var-list>])
\

(define parser-rules
  []                            -> #\Escape
  [[Matchers Semantic] | Rules] -> (let Rule-try (gensym "Rule-try")
                                     [let Rule-try (parser-rule Matchers Semantic)
                                       [if [= #\Escape Rule-try]
                                           (parser-rules Rules)
                                           Rule-try]]))

\
(PPRINT (parser-rules [[[-*-] [1+ -*-]]
                       [[","] 50]]))
\

(define organize-parser-elements
  []        []                   -> []
  This-rule [;           | Rest] -> [[This-rule (last This-rule)] | (organize-parser-elements [] Rest)]
  This-rule [:= Semantic | Rest] -> [[This-rule Semantic        ] | (organize-parser-elements [] Rest)]
  This-rule [A           | Rest] -> (organize-parser-elements (append This-rule [A]) Rest))

\
(track organize-parser-elements)
(organize-parser-elements [] [<a>;])
(organize-parser-elements [] [<a> <b>;])
(organize-parser-elements [] [<a>; <b> <c>;])

(organize-parser-elements []
                          [-*-       := [1+ -*-]
                           "," <var> := [<var> 90]])
(parser-rules (organize-parser-elements []
                                        [-*-       := [1+ -*-]
                                         "," <var> := [<var> 90]]))
\

(define parser-parser
  Parser-name Rules -> (let Main-try (gensym "Main-try")
                         [define Parser-name
                           Peak P -> [let Main-try (parser-rules (organize-parser-elements [] Rules))
                                       [if [or [= #\Escape Main-try]
                                               [= (parser-fail) [snd Main-try]]]
                                           #\Escape
                                           Main-try]]]))

\
(PPRINT (parser-parser <strange> [-*- := [1+ -*-] "," <var> := [list <var> 90]]))
(parser-parser <strange> [-*- := [1+ -*-] "," <var> := [cons <var> [cons 90 []]]])
(parser-parser <var-list>
               [<var> "," <var-list> := [cons <var> | <var-list>]
                <var>                := [list <var>]
                <e>                  := [list]])
(organize-parser-elements []
                          [<var> "," <var-list> := [cons <var> | <var-list>]
                           <var>                := [list <var>]
                           <e>                  := [list]])
\


(define parser-parser-macro
  [parser Parser-name | Rules] -> (parser-parser Parser-name Rules)
  A -> A)

(sugar in parser-parser-macro 1)


(define parser-compile
  Func Input -> (Func (/. X (if (> X (length Input))
                                #\Escape
                                (nth X Input)))
                      1))
                          

\
(parser <strange>
   "a" -*- := (1+ 50)
   "," <var> := [<var> 90])

(ps <strange>)

(define peak
  P -> (nth P ["(" "int" "int2" "anint" "," "float" "afloat" "," "anunknown" ")"]))

(<strange> peak 1)
(parser-compile <strange> ["(" "int" "int2" "anint" "," "float" "afloat" "," "anunknown" ")"])

(parser <strange2>
        (+ 2 3) := 6)

(parser-parser <strange2> [[+ 2 3] := 6])

(parser-parser <strange3> [<a> := 7])

(ps <strange2>)

(ps <name>)

\
